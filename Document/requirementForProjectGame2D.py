#requirementForProjectGame2D

"""
? Project Requirement
- Title: Pixel Forest Runner (Java 2D Game)
@ 1. รายละเอียดเกม: Pixel Forest Runner
- ผู้เล่นจะควบคุมตัวละครหลักที่ วิ่งอัตโนมัติจากซ้ายไปขวา ในป่าพิกเซล (Pixel Forest)
- ระหว่างทางจะมี สิ่งกีดขวาง เช่น ก้อนหิน ต้นไม้ และสัตว์เล็ก ๆ
- ผู้เล่นต้องใช้การกดปุ่มเพื่อหลบสิ่งกีดขวาง
    ● Space Bar: กระโดดข้ามสิ่งกีดขวาง
    ● Arrow Down: หมอบหลบสิ่งกีดขวางด้านบน
- มีแถบพลังชีวิต (HP Bar) เริ่มต้นที่ 100
    ● เมื่อชนสิ่งกีดขวาง HP จะลดลง 10
    ● หาก HP หมด เกมจะขึ้นสถานะ Game Over
- มี คะแนน (Score) ที่เพิ่มขึ้นตามระยะทางที่วิ่งได้
@ 2. โครงสร้างและคุณสมบัติหลักของเกม
- เกมมีทั้งหมด 2 ด่าน (Levels) ซึ่งแต่ละด่านจะมีความยากและสภาพแวดล้อมที่แตกต่างกัน มี 3 ตัวละครหลัก 
  (Characters) ให้ผู้เล่นเลือก โดยแต่ละตัวมี อนิเมชันการเคลื่อนไหว เช่น การวิ่ง การกระโดด และการหมอบ
- ภายในเกมมีการใช้ Thread อย่างน้อย 3 Thread เพื่อแยกการทำงาน เช่น
    ● Thread สำหรับควบคุมเวลา (Timer)
    ● Thread สำหรับการอัปเดตการเคลื่อนไหวของตัวละคร
    ● Thread สำหรับการประมวลผลของเกม (Game Loop / Collision Checking)
@ 3. แนวคิดและเทคโนโลยีที่ใช้
- พัฒนาโดยใช้ภาษา Java (2D Graphics)
- ใช้แนวคิดเชิงวัตถุ (Object-Oriented Programming: OOP) อย่างครบถ้วน ได้แก่
    ● Encapsulation = ปิดบังรายละเอียดของข้อมูลและควบคุมการเข้าถึงผ่าน method
    ● Inheritance = สร้างคลาสย่อยที่สืบทอดคุณสมบัติจากคลาสหลัก เช่น ตัวละครหรือสิ่งกีดขวาง
    ● Polymorphism = การเขียน method เดียวกันให้ทำงานแตกต่างกันตามชนิดของอ็อบเจกต์
    ● Abstract Class / Interface = ใช้กำหนดโครงสร้างหลักของคลาสต่าง ๆ เช่น ตัวละครหรือสิ่งของในเกม
    ● Event-Driven Programming = ตอบสนองต่อการกดปุ่มและเหตุการณ์ในเกม
    ● GUI (Graphical User Interface) = ใช้หน้าจอกราฟิกในการโต้ตอบกับผู้เล่น
    ● Graphics & Animation = ใช้ Java 2D วาดภาพและเคลื่อนไหววัตถุ
    ● Thread = ควบคุมการประมวลผลแบบขนานเพื่อความลื่นไหลของเกม
@ 4. หน้าจอและระบบควบคุม
- หน้าจอหลัก (Start Screen): มีชื่อเกมและปุ่มเริ่มเล่น (Start Game)
- ระบบ Pause/Play: ผู้เล่นสามารถหยุดหรือเล่นต่อระหว่างเกมได้
- หน้าจอ Game Over: แสดงคะแนนและปุ่มเล่นใหม่
@ 5. Java Library ที่ควรใช้สำหรับ GUI & Graphics
* 5.1 GUI และ Event Handling (ส่วนติดต่อผู้เล่น) - ใช้สำหรับสร้างหน้าต่างเกม ปุ่ม เเละรับเหตุการณ์จากคีย์บอร์ด/เมาส์
    ● javax.swing.* → ใช้สำหรับสร้างหน้าต่างเกม (JFrame), ฉาก (JPanel), และปุ่ม (JButton)
    ● java.awt.* → ใช้วาดภาพ วาดกราฟิก 2D หรือใส่สี ฟอนต์
    ● java.awt.event.* → สำหรับรับ input จากผู้เล่น เช่น ปุ่ม Spacebar หรือ Arrow
@ 6. สิ่งที่ควรมีเพิ่มเติม (เฉพาะที่จำเป็น)
* 1. Game State Manager (การจัดการสถานะของเกม):
     - สร้างระบบเพื่อจัดการสถานะต่างๆ ของเกม เช่น MENU, PLAYING, PAUSED, GAME_OVER ซึ่งมักจะทำโดยใช้
       Enum ใน Java วิธีนี้จะช่วยให้คุณควบคุมการแสดงผล และการทำงานในแต่ละหน้าจอได้ง่ายขึ้นเยอะเลยครับ
* 2. Asset Loader (คลาสสำหรับโหลดทรัพยากร): 
     - สร้างคลาสแยกสำหรับโหลดไฟล์รูปภาพ (Sprites) ของตัวละคร, พื้นหลัง, และสิ่งกีดขวางโดยเฉพาะ 
       เพื่อป้องกันการโหลดไฟล์ซ้ำซ้อนและทำให้โค้ดในส่วน Game Logic สะอาดขึ้น
* 3. Collision Detection System (ระบบการตรวจจับการชน): 
     - แม้จะอยู่ใน Game Loop แต่การคิดเรื่องนี้ไว้ตั้งแต่แรกจะดีมากครับ วิธีที่ง่ายที่สุดสำหรับเกม 2D คือการใช้ 
       Bounding Box (กล่องสี่เหลี่ยม) โดยใช้คลาส java.awt.Rectangle มาล้อมรอบตัวละครและสิ่งกีดขวาง 
       แล้วใช้เมธอด .intersects() เพื่อเช็คว่าชนกันหรือไม่
"""
#LogicDevelopGames

"""
- р╣Ар╕Ыр╣Йр╕▓р╕лр╕бр╕▓р╕в: "р╣Ар╕Вр╕╡р╕вр╕Щр╣Ар╕Бр╕бр╣Гр╕лр╣Йр╕Бр╕ер╕▒р╕Ър╕бр╕▓р╣Бр╕Бр╣Йр╕Щр╣Йр╕нр╕вр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф" 
  тЧП р╕кр╕┤р╣Ир╕Зр╕Щр╕╡р╣Йр╕Ир╕░р╣Ар╕Бр╕┤р╕Фр╕Вр╕╢р╣Йр╕Щр╣Др╕Фр╣Йр╕Бр╣Зр╕Хр╣Ир╕нр╣Ар╕бр╕╖р╣Ир╕нр╕зр╕▓р╕З р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕Кр╕┤р╕Зр╕гр╕░р╕Ър╕Ъ р╕Хр╕▒р╣Йр╕Зр╣Бр╕Хр╣Ир╕Хр╣Йр╕Щ
  тЧП р╣Бр╕Щр╕зр╕Др╕┤р╕Фр╕кр╕│р╕Др╕▒р╕Нр╕Др╕╖р╕н тАЬр╣Бр╕вр╕Бр╕Чр╕╕р╕Бр╕кр╕┤р╣Ир╕Зр╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕Бр╕▒р╕Щ (Separation of Concerns)тАЭ
  тЧП р╕Юр╕╣р╕Фр╕Зр╣Ир╕▓р╕в р╣Ж р╕Др╕╖р╕н "р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Чр╕│р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Щ р╣Др╕бр╣Ир╕Др╕зр╕гр╣Ар╕Вр╕╡р╕вр╕Щр╕Ыр╕Щр╕Бр╕▒р╕Щр╣Гр╕Щр╣Др╕Яр╕ер╣Мр╣Ар╕Фр╕╡р╕вр╕з"
? р╣Бр╕Щр╕зр╕Др╕┤р╕Фр╕лр╕ер╕▒р╕Бр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ир╕гр╕┤р╕Зр╣Гр╕Щр╕зр╕Зр╕Бр╕▓р╕г 
@ 1. Game Loop (р╕лр╕▒р╕зр╣Гр╕Ир╕Вр╕нр╕Зр╕Чр╕╕р╕Бр╣Ар╕Бр╕б)
- р╕Чр╕╕р╕Бр╣Ар╕Бр╕бр╕Ир╕░р╕бр╕╡ тАЬр╕ер╕╣р╕Ыр╕лр╕ер╕▒р╕БтАЭ р╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щр╕Лр╣Йр╕│р╣Др╕Ыр╣Ар╕гр╕╖р╣Ир╕нр╕в р╣Ж:
    while (running) {
        update();   #* р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х logic р╣Ар╕Кр╣Ир╕Щ р╕Бр╕▓р╕гр╣Ар╕Др╕ер╕╖р╣Ир╕нр╕Щр╣Др╕лр╕з р╕Бр╕▓р╕гр╕Кр╕Щр╕Бр╕▒р╕Щ
        render();   #* р╕зр╕▓р╕Фр╕ар╕▓р╕Юр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Ър╕Щр╕лр╕Щр╣Йр╕▓р╕Ир╕н
    }
тЬЕ р╣Бр╕вр╕Б тАЬupdateтАЭ р╕Бр╕▒р╕Ъ тАЬrenderтАЭ р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕Бр╕▒р╕Щр╣Ар╕Фр╣Зр╕Фр╕Вр╕▓р╕Ф р╕нр╕вр╣Ир╕▓р╣Гр╕лр╣Йр╣Вр╕Др╣Йр╕Фр╕зр╕▓р╕Фр╕ар╕▓р╕Ю (graphics) р╣Др╕Ыр╕вр╕╕р╣Ир╕Зр╕Бр╕▒р╕Ър╣Вр╕Др╣Йр╕Ф
    р╕Бр╕▓р╕гр╕Др╕│р╕Щр╕зр╕У logic р╣Ар╕Кр╣Ир╕Щ HP р╕лр╕гр╕╖р╕нр╕Бр╕▓р╕гр╕Кр╕Щ
@ 2. Entity-Based Architecture
- р╕Чр╕╕р╕Бр╕кр╕┤р╣Ир╕Зр╣Гр╕Щр╣Ар╕Бр╕б = Entity р╕Чр╕╕р╕Б Entity р╕бр╕╡р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕╖р╕нр╕Щ р╣Ж р╕Бр╕▒р╕Щр╣Гр╕Щр╣Ар╕Кр╕┤р╕Зр╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕З
ЁЯТбр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Кр╣Ир╕Щ:
    interface Entity {
        void update();
        void render(Graphics g);
    }
- р╣Бр╕ер╣Йр╕з Player, Enemy, Bullet, Item р╕Бр╣З implement interface р╕Щр╕╡р╣Й
тЬЕ р╕Вр╣Йр╕нр╕Фр╕╡:
    тЧП р╣Ар╕Юр╕┤р╣Ир╕бр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гр╣Гр╕лр╕бр╣И тЖТ р╣Бр╕Др╣Ир╕кр╕гр╣Йр╕▓р╕З class р╣Гр╕лр╕бр╣И р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Бр╕Бр╣Йр╣Вр╕Др╣Йр╕Фр╕лр╕ер╕▒р╕Бр╣Ар╕ер╕в
    тЧП р╣Ар╕Юр╕гр╕▓р╕░р╕ер╕╣р╕Ыр╣Ар╕Бр╕бр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Йр╕Ьр╣Ир╕▓р╕Щ interface р╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з
@ 3. Manager / Controller Pattern
- р╣Гр╕Кр╣Й тАЬр╕Хр╕▒р╕зр╕Бр╕ер╕▓р╕ЗтАЭ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕┤р╣Ир╕Зр╕Хр╣Ир╕▓р╕З р╣Ж р╣Бр╕Чр╕Щр╕Чр╕╡р╣Ир╕Ир╕░р╕вр╕▒р╕Фр╕Чр╕╕р╕Бр╕нр╕вр╣Ир╕▓р╕Зр╣Др╕зр╣Йр╣Гр╕Щ main class
ЁЯТбр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕Кр╣Ир╕Щ:
    тЧП EntityManager = р╣Ар╕Бр╣Зр╕Ър╕гр╕▓р╕вр╕Бр╕▓р╕г Entity р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╕Йр╕▓р╕Б (player, enemy, bullet р╕пр╕ер╕п)
    тЧП InputManager = р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕Др╕╡р╕вр╣Мр╕Ър╕нр╕гр╣Мр╕Ф/р╣Ар╕бр╕▓р╕кр╣М
    тЧП SceneManager = р╕кр╕ер╕▒р╕Ър╕Фр╣Ир╕▓р╕Щ, р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Йр╕▓р╕Б, р╣Вр╕лр╕ер╕Фр╕Чр╕гр╕▒р╕Юр╕вр╕▓р╕Бр╕г
    тЧП AudioManager = р╣Ар╕ер╣Ир╕Щр╣Ар╕кр╕╡р╕вр╕З, р╕лр╕вр╕╕р╕Фр╣Ар╕кр╕╡р╕вр╕З
    тЧП CollisionManager = р╕Хр╕гр╕зр╕Ир╕Бр╕▓р╕гр╕Кр╕Щ
тЬЕ р╕Вр╣Йр╕нр╕Фр╕╡: р╣Ар╕зр╕ер╕▓р╣Бр╕Бр╣Йр╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╣Гр╕Ф р╣Ж тЖТ р╣Бр╕Бр╣Йр╣Бр╕Др╣И Manager р╣Ар╕Фр╕╡р╕вр╕з р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Бр╕Хр╕░р╕кр╣Ир╕зр╕Щр╕нр╕╖р╣Ир╕Щр╣Ар╕ер╕в
@ 4. Component-Based Design (р╣Бр╕Щр╕зр╕Др╕┤р╕Фр╕кр╕бр╕▒р╕вр╣Гр╕лр╕бр╣И)
- р╣Бр╕вр╕Б тАЬр╕Вр╣Йр╕нр╕бр╕╣р╕етАЭ р╕Бр╕▒р╕Ъ тАЬр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бтАЭ р╕Вр╕нр╕З Entity р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕Бр╕▒р╕Щ
- р╣Ар╕Кр╣Ир╕Щ Player р╕бр╕╡р╕кр╣Ир╕зр╕Щр╕Ыр╕гр╕░р╕Бр╕нр╕Ъ (component) р╣Бр╕Ър╕Ър╕Щр╕╡р╣Й:
    тЧП TransformComponent (р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З, р╕Др╕зр╕▓р╕бр╣Ар╕гр╣Зр╕з)
    тЧП SpriteComponent (р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю)
    тЧП PhysicsComponent (р╣Бр╕гр╕Зр╣Вр╕Щр╣Йр╕бр╕Цр╣Ир╕зр╕З, р╕Бр╕▓р╕гр╕Кр╕Щ)
    тЧП HealthComponent (HP)
    тЧП InputComponent (р╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕б)
- р╣Ар╕зр╕ер╕▓р╕Ир╕░р╣Ар╕Юр╕┤р╣Ир╕бр╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╣Гр╕лр╕бр╣И (р╣Ар╕Кр╣Ир╕Щр╕ир╕▒р╕Хр╕гр╕╣р╣Гр╕лр╕бр╣И)
тЖТ р╣Бр╕Др╣Ир╕Ыр╕гр╕░р╕Бр╕нр╕Ъ component р╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Йр╣Ар╕Вр╣Йр╕▓р╕Фр╣Йр╕зр╕вр╕Бр╕▒р╕Щ р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Ар╕Вр╕╡р╕вр╕Щ class р╕вр╕▓р╕з р╣Ж р╕нр╕╡р╕Б
@ 5. Data-Driven Design
- р╣Ар╕Бр╣Зр╕Ър╕Др╣Ир╕▓р╕Хр╣Ир╕▓р╕З р╣Ж р╣Др╕зр╣Йр╣Гр╕Щр╣Др╕Яр╕ер╣Мр╕ар╕▓р╕вр╕Щр╕нр╕Б (JSON, XML, р╕лр╕гр╕╖р╕н properties) р╣Др╕бр╣Ир╕Эр╕▒р╕Зр╕Др╣Ир╕▓р╕Др╕Зр╕Чр╕╡р╣Ир╣Др╕зр╣Йр╣Гр╕Щр╣Вр╕Др╣Йр╕Ф
- р╣Ар╕Кр╣Ир╕Щ:
    {
      "player": {
        "speed": 5,
        "jumpPower": 10,
        "maxHealth": 100
      }
    }
- р╣Ар╕зр╕ер╕▓р╕нр╕вр╕▓р╕Бр╕Ыр╕гр╕▒р╕Ъ balance р╣Ар╕Бр╕б тЖТ р╣Бр╕Бр╣Йр╣Др╕Яр╕ер╣М data р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Бр╕Бр╣Йр╣Вр╕Др╣Йр╕Фр╣Ар╕ер╕в р╣Ар╕лр╕бр╕▓р╕░р╕бр╕▓р╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Бр╕бр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕З test р╕лр╕ер╕▓р╕вр╕гр╕нр╕Ъ
@ 6. State Machine Pattern
- р╣Бр╕вр╕Б тАЬр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╣Ар╕Бр╕бтАЭ р╣Бр╕ер╕░ тАЬр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╕Хр╕▒р╕зр╕ер╕░р╕Др╕гтАЭ р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕Бр╕▒р╕Щр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ
ЁЯТбр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕Цр╕▓р╕Щр╕░р╣Ар╕Бр╕б (Game State): Menu, Playing, Paused, GameOver
ЁЯТбр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕Вр╕нр╕Зр╕Хр╕▒р╕зр╕ер╕░р╕Др╕г (Character State): Idle, Run, Jump, Attack, Dead
- р╣Бр╕Хр╣Ир╕ер╕░ state р╕Ир╕░р╕бр╕╡ logic р╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З р╣Ар╕Кр╣Ир╕Щ:
    if (state == PlayerState.JUMP) {
        velocityY -= gravity;
    }
тЬЕ р╕Вр╣Йр╕нр╕Фр╕╡: р╣Ар╕Юр╕┤р╣Ир╕б animation р╕лр╕гр╕╖р╕н behavior р╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Йр╣Вр╕Фр╕вр╣Др╕бр╣Ир╣Бр╕Хр╕░ logic р╕лр╕ер╕▒р╕Б
@ 7. Event / Observer Pattern
- р╕Цр╣Йр╕▓р╣Ар╕Бр╕бр╣Ар╕гр╕┤р╣Ир╕бр╕бр╕╡р╕гр╕░р╕Ър╕Ър╣Ар╕вр╕нр╕░ р╣Ар╕Кр╣Ир╕Щ р╕ир╕▒р╕Хр╕гр╕╣р╕Хр╕▓р╕в тЖТ р╕Хр╣Йр╕нр╕Зр╣Гр╕лр╣Йр╕гр╕░р╕Ър╕Ър╣Ар╕кр╕╡р╕вр╕З, р╕Др╕░р╣Бр╕Щр╕Щ, р╣Бр╕ер╕░ UI р╕гр╕╣р╣Й
- р╣Гр╕Кр╣Йр╕гр╕░р╕Ър╕Ъ Event р╕Кр╣Ир╕зр╕в
    EventManager.emit("enemyDead");
- р╕Ир╕▓р╕Бр╕Щр╕▒р╣Йр╕Щр╕кр╣Ир╕зр╕Щр╕нр╕╖р╣Ир╕Щр╕Ир╕░ subscribe:
    EventManager.on("enemyDead", () -> {
        score += 100;
        sound.play("enemy_death");
    });
тЬЕ р╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╣Гр╕лр╣Й class р╕лр╕Щр╕╢р╣Ир╕Зр╣Др╕Ыр╕гр╕╣р╣Йр╕Ир╕▒р╕Бр╕нр╕╡р╕Б class р╣Вр╕Фр╕вр╕Хр╕гр╕З тЖТ р╕ер╕Фр╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╣Вр╕вр╕З
@ 8. р╣Бр╕вр╕Б Logic р╕нр╕нр╕Бр╕Ир╕▓р╕Б Rendering р╕нр╕вр╣Ир╕▓р╕Зр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ
- р╕нр╕вр╣Ир╕▓р╕Ьр╕кр╕б тАЬр╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕бр╕Др╕┤р╕ФтАЭ р╕Бр╕▒р╕Ъ тАЬр╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕бр╣Бр╕кр╕Фр╕Зр╕Ьр╕етАЭ
- р╣Ар╕Кр╣Ир╕Щ:
    player.updatePhysics();  #* logic
    player.draw(g);          #* graphics
- р╕Щр╕╡р╣Ир╕Др╕╖р╕нр╕лр╕ер╕▒р╕Бр╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕Вр╕нр╕З Model-View-Controller(MVC) р╣Бр╕ер╕░р╕бр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╣Гр╕лр╣Йр╕Бр╕ер╕▒р╕Ър╕бр╕▓р╣Бр╕Бр╣Йр╕Зр╣Ир╕▓р╕вр╕кр╕╕р╕Ф р╣Ж р╣Ар╕ер╕в

? р╕кр╕гр╕╕р╕Ы Concept р╣Гр╕лр╕Нр╣Ир╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╕Ир╕гр╕┤р╕З
тЧП Game Loop	= р╕Др╕зр╕Ър╕Др╕╕р╕бр╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕зр╕▓р╕Ф тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╣Ар╕Бр╕бр╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З
тЧП Entity System	= р╕Чр╕╕р╕Бр╕кр╕┤р╣Ир╕Зр╣Гр╕Щр╣Ар╕Бр╕бр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Вр╕Др╕гр╕Зр╣Ар╕Фр╕╡р╕вр╕зр╕Бр╕▒р╕Щ тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╣Ар╕Юр╕┤р╣Ир╕б/р╕ер╕Ър╕Зр╣Ир╕▓р╕в
тЧП Manager Pattern = р╣Бр╕вр╕Бр╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╣Бр╕Хр╣Ир╕ер╕░р╕гр╕░р╕Ър╕Ъ тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╣Бр╕Бр╣Йр╕Зр╣Ир╕▓р╕в р╣Др╕бр╣Ир╕Кр╕Щр╕Бр╕▒р╕Щ
тЧП State Machine	= р╣Бр╕вр╕Бр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Хр╕▓р╕бр╕кр╕Цр╕▓р╕Щр╕░ тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╕Ыр╕гр╕▒р╕Ъ logic р╣Гр╕лр╕бр╣Ир╣Др╕бр╣Ир╕Бр╕гр╕░р╕Чр╕Ър╣Ар╕Фр╕┤р╕б
тЧП Data Driven = р╕Др╣Ир╕▓р╕бр╕▓р╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣Мр╕Щр╕нр╕Б тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╕Ыр╕гр╕▒р╕Ър╕кр╕бр╕Фр╕╕р╕ер╣Ар╕гр╣Зр╕з
тЧП Event System = р╕гр╕░р╕Ър╕Ър╕кр╕╖р╣Ир╕нр╕кр╕▓р╕гр╣Бр╕Ър╕Ър╕лр╕ер╕зр╕б тЖТ р╕Чр╕│р╣Гр╕лр╣Й р╕ер╕Фр╕Бр╕▓р╕гр╕Ьр╕╣р╕Б class
"""


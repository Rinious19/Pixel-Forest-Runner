package core; //? ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô package core

import javax.swing.JPanel;

import entities.BackgroundInfo;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Color;

import gamestates.GameOverState;
import gamestates.GameState;
import gamestates.MenuState;
import gamestates.PlayingState;
import gamestates.State;
import inputs.KeyboardInputs;
import utils.AssetLoader;

import java.util.HashMap;
import java.util.Map;
import gamestates.SelectionState;
import java.awt.image.BufferedImage;

//? GamePanel ‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏à‡∏≤‡∏Å JPanel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞ implements Runnable ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Thread ‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ
public class GamePanel extends JPanel implements Runnable {
    //@ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≠‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    public static final int SCREEN_WIDTH = 800; //* ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    public static final int SCREEN_HEIGHT = 600; //* ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    private static final int FPS = 60; //* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏ß‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà 60 ‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    //@ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° 
    private Thread gameThread;
    private Map<GameState, State> gameStates; //* 1. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® HashMap
    private State currentGameState;           //* 2. ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    private int selectedCharacterId = 1;      //* 3. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö ID ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    private int selectedStageId = BackgroundInfo.STAGE_FOREST_OF_DUSK;
    private BufferedImage currentBackground; // üí° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏£‡∏¥‡∏á

    //@ Constructor ‡∏Ç‡∏≠‡∏á GamePanel
    public GamePanel() {
        //* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Panel ‡∏ô‡∏µ‡πâ
        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        this.setFocusable(true); //* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Panel ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ
        this.currentGameState = new MenuState(this); //* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô (PlayingState)
        //! ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
        this.addKeyListener(new KeyboardInputs(this));
        initClasses(); //* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initClasses
    }
    private void initClasses() {
        this.gameStates = new HashMap<>(); //* 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Instance ‡∏Ç‡∏≠‡∏á HashMap
        // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å State ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô PLAYING/GAME_OVER)
        gameStates.put(GameState.MENU, new MenuState(this));
        gameStates.put(GameState.CHARACTER_SELECTION, new SelectionState(this));
        currentGameState = gameStates.get(GameState.MENU); //* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏â‡∏≤‡∏Å Menu
        loadGameAssets(this.selectedStageId); //* ‡πÇ‡∏´‡∏•‡∏î Asset ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }

    //@ startGameThread() ‚Üí ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å" ‡∏ó‡∏µ‡πà Panel ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Frame ‡πÅ‡∏•‡πâ‡∏ß 
    public void startGameThread() { //* ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
        gameThread = new Thread(this); //* ‡∏™‡∏£‡πâ‡∏≤‡∏á Thread ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ GamePanel ‡∏ô‡∏µ‡πâ (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Runnable)
        gameThread.start(); //* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Thread (‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î run())
    }

    //@ run() ‚Üí ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Thread ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Game Loop ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
    @Override
    public void run() {
        //! Game Loop: ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° 
        double drawInterval = 1_000_000_000.0 / FPS; //* ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏° (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏≤‡πÇ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        double delta = 0;
        long lastTime = System.nanoTime();
        long currentTime;

        //* ‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏ï‡∏£‡∏≤‡∏ö‡πÉ‡∏î‡∏ó‡∏µ‡πà gameThread ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null
        while (gameThread != null) { //! ‡πÄ‡∏õ‡πá‡∏ô null ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° ‡πÄ‡∏ä‡πà‡∏ô exit, pause
            currentTime = System.nanoTime();
            delta += (currentTime - lastTime) / drawInterval;
            lastTime = currentTime;
            //* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏ö 1 ‡πÄ‡∏ü‡∏£‡∏°
            if (delta >= 1) {
                //* 1. UPDATE: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
                update();
                //* 2. DRAW: ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                repaint(); //* ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å paintComponent() ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                delta--;
            }
        }
    }

    //@ update() ‚Üí ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    public void update() {
        if (currentGameState != null) { //* ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            currentGameState.update();
        }
    }

    //@ paintComponent() ‚Üí ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏á‡∏ö‡∏ô Panel
    @Override
    public void paintComponent(Graphics g) { //* Graphics g ‡∏Ñ‡∏∑‡∏≠ "‡∏û‡∏π‡πà‡∏Å‡∏±‡∏ô" ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ß‡∏≤‡∏î
        super.paintComponent(g); //! ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ JPanel ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        // 1. ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πà‡∏≤‡∏ô)
        if (currentBackground != null) {
            // ‚úÖ ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PLAYING State)
            g.drawImage(currentBackground, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, null);
        } else {
            // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πà‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô Menu State)
            g.setColor(Color.DARK_GRAY);
            g.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
        }
        // 2. ‡∏ß‡∏≤‡∏î‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (currentGameState != null) {
            currentGameState.draw(g);
        }
        g.dispose();
    }
    //@ getcurrentGameState() ‚Üí ‡πÉ‡∏´‡πâ GamePanel ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ    
    public State getCurrentGameState() {
        return currentGameState;
    }
    public void setSelectedCharacterId(int id) {
        this.selectedCharacterId = id;
    }
    
    public int getSelectedCharacterId() {
        return this.selectedCharacterId;
    }
    public void setSelectedStageId(int id) { // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ
        this.selectedStageId = id;
    }
    public int getSelectedStageId() { // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ
        return this.selectedStageId;
    }

    //? State Manager Method
    //@ ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö State ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    public void setCurrentGameState(GameState newState, int score) {
        switch (newState) {
            case MENU:
            case CHARACTER_SELECTION:
                this.currentGameState = gameStates.get(newState);
                break;
            case PLAYING:
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô
                this.currentGameState = new PlayingState(this); 
                break;
            case GAME_OVER:
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÄ‡∏Å‡∏°
                this.currentGameState = new GameOverState(this, score); 
                break;
            // case LEVEL_SELECTION: ... (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
        }
        if (newState == GameState.PLAYING) {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            loadGameAssets(this.selectedStageId); 
        }
    }
    // üí° ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° (‡∏≠‡∏≤‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å setCurrentGameState)
    public void loadGameAssets(int stageId) {
    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πà‡∏≤‡∏ô
    BackgroundInfo bgInfo = BackgroundInfo.getBackgroundById(stageId);
    
    // 2. ‡πÇ‡∏´‡∏•‡∏î Asset ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    // AssetLoader ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î loadStaticSprite(String fileName)
    this.currentBackground = AssetLoader.loadStaticSprite(bgInfo.getAssetFileName()); 
    
    // 3. (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà/Level data ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    }
}
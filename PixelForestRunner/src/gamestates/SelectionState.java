package gamestates;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.FontMetrics;
// ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ import ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß (BufferedImage, AssetLoader)

import core.GamePanel;
import entities.CharacterInfo; 
import entities.BackgroundInfo; 
import gamestates.State;
import utils.AssetLoader;       

public class SelectionState extends State {
    
    // ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: CHARACTER -> STAGE
    private enum SelectionMode { CHARACTER, STAGE }
    private SelectionMode currentMode = SelectionMode.CHARACTER;
    
    //@ Attributes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Character
    private CharacterInfo[] characters;
    private int characterIndex = 0; 
    private final int NUM_CHARACTERS;
    
    //@ Attributes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Stage
    private BackgroundInfo[] stages;
    private int stageIndex = 0; 
    private final int NUM_STAGES;
    
    public SelectionState(GamePanel gamePanel) {
        super(gamePanel);
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        this.characters = CharacterInfo.loadAllCharacters();
        this.NUM_CHARACTERS = characters.length;
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πà‡∏≤‡∏ô
        this.stages = BackgroundInfo.loadAllBackgrounds();
        this.NUM_STAGES = stages.length;
    }

    @Override
    public void update() {}

    @Override
public void draw(Graphics g) {
    // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    g.setColor(Color.BLACK);
    g.fillRect(0, 0, GamePanel.SCREEN_WIDTH, GamePanel.SCREEN_HEIGHT);

    g.setColor(Color.WHITE);

    if (currentMode == SelectionMode.CHARACTER) {
        // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        g.setFont(new Font("Arial", Font.BOLD, 40));
        drawCenteredText(g, "SELECT YOUR HERO", 150);

        // ‡∏ß‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        drawCharacterSelection(g);

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏á
        g.setFont(new Font("Arial", Font.PLAIN, 22));
        drawCenteredText(g, "Press ENTER to select hero", GamePanel.SCREEN_HEIGHT - 50);

    } else if (currentMode == SelectionMode.STAGE) {
        // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
        g.setFont(new Font("Arial", Font.BOLD, 40));
        drawCenteredText(g, "SELECT YOUR STAGE", 150);

        // ‡∏ß‡∏≤‡∏î‡∏î‡πà‡∏≤‡∏ô
        drawStageSelection(g);

        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏á
        g.setFont(new Font("Arial", Font.PLAIN, 22));
        drawCenteredText(g, "Press ENTER to start game", GamePanel.SCREEN_HEIGHT - 50);
    }

    // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î
    g.setColor(Color.CYAN);
    g.setFont(new Font("Arial", Font.PLAIN, 20));
    drawCenteredText(g, "Press TAB to switch between Hero and Stage selection",
                     GamePanel.SCREEN_HEIGHT - 100);
}

// üí° ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
    private void drawCenteredText(Graphics g, String text, int y) {
        FontMetrics fm = g.getFontMetrics();
        int textWidth = fm.stringWidth(text);
        int x = (GamePanel.SCREEN_WIDTH - textWidth) / 2;
        g.drawString(text, x, y);
    }
    
    // üí° ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏ó‡∏ô‡∏£‡∏π‡∏õ)
    private void drawCharacterSelection(Graphics g) {
        int itemWidth = 180; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö
        int itemHeight = 150;
        int spacing = 20; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        int totalWidth = (NUM_CHARACTERS * itemWidth) + ((NUM_CHARACTERS - 1) * spacing);
        int startX = (GamePanel.SCREEN_WIDTH - totalWidth) / 2; // ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        int yPos = 250;
        for (int i = 0; i < NUM_CHARACTERS; i++) {
            CharacterInfo info = characters[i];

            int xPos = startX + (i * (itemWidth + spacing));

            // 2. ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            g.setColor(Color.DARK_GRAY);
            g.fillRect(xPos, yPos, itemWidth, itemHeight);

            // 3. ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå
            g.setColor(i == characterIndex ? Color.YELLOW : Color.GRAY);
            g.drawRect(xPos - 5, yPos - 5, itemWidth + 10, itemHeight + 10);

            // 4. ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
            g.setFont(new Font("Arial", Font.BOLD, 20));
            FontMetrics fm = g.getFontMetrics(g.getFont());
            String displayText = "[" + info.getId() + "] " + info.getName();
            int textWidth = fm.stringWidth(displayText);
            int textX = xPos + (itemWidth - textWidth) / 2;

            // 5. ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà ‚Äú‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏ô‡∏ß‡∏î‡∏¥‡πà‡∏á‚Äù (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
            int textY = yPos + itemHeight + fm.getAscent() + 10;

            g.setColor(Color.WHITE);
            g.drawString(displayText, textX, textY);
        }
    }
    
    // üí° ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏ó‡∏ô‡∏£‡∏π‡∏õ)
    private void drawStageSelection(Graphics g) {
        for (int i = 0; i < NUM_STAGES; i++) {
            BackgroundInfo info = stages[i];
            
            int xPos = 70 + (i * 350); 
            int yPos = 200; 
            int rectWidth = 320;
            int rectHeight = 180;
            
            // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏ó‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            g.setColor(Color.DARK_GRAY);
            g.fillRect(xPos, yPos, rectWidth, rectHeight);
            BufferedImage preview = AssetLoader.loadStaticSprite(info.getAssetFileName()); 
            if (preview != null) {
                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
                int imgWidth = rectWidth - 20; 
                int imgHeight = rectHeight - 20;
                int imgX = xPos + 10; 
                int imgY = yPos + 10; 
                
                g.drawImage(preview, imgX, imgY, imgWidth, imgHeight, null); 
            }
            // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            g.setColor(i == stageIndex ? Color.YELLOW : Color.GRAY);
            g.drawRect(xPos - 5, yPos - 5, rectWidth + 10, rectHeight + 10);
            
            // ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 20));
            g.drawString(info.getName(), xPos + 10, yPos + rectHeight + 30);
        }
    }

    @Override
    public void keyPressed(int keyCode) {
        // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ TAB
        if (keyCode == KeyEvent.VK_TAB) {
            currentMode = (currentMode == SelectionMode.CHARACTER) ? SelectionMode.STAGE : SelectionMode.CHARACTER;
            return;
        }
        
        if (currentMode == SelectionMode.CHARACTER) {
            // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
            if (keyCode == KeyEvent.VK_LEFT) {
                characterIndex = (characterIndex - 1 + NUM_CHARACTERS) % NUM_CHARACTERS;
            } else if (keyCode == KeyEvent.VK_RIGHT) {
                characterIndex = (characterIndex + 1) % NUM_CHARACTERS;
            } else if (keyCode == KeyEvent.VK_ENTER) {
                // 1. ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                int selectedId = characters[characterIndex].getId();
                gamePanel.setSelectedCharacterId(selectedId); 

                // 2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
                currentMode = SelectionMode.STAGE;
            }
        } else if (currentMode == SelectionMode.STAGE) {
            // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πà‡∏≤‡∏ô
            if (keyCode == KeyEvent.VK_LEFT) {
                stageIndex = (stageIndex - 1 + NUM_STAGES) % NUM_STAGES;
            } else if (keyCode == KeyEvent.VK_RIGHT) {
                stageIndex = (stageIndex + 1) % NUM_STAGES;
            } else if (keyCode == KeyEvent.VK_ENTER) {
                // 1. ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                int selectedId = stages[stageIndex].getId();
                gamePanel.setSelectedStageId(selectedId); 

                // 2. ‡πÑ‡∏õ State ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
                gamePanel.setCurrentGameState(GameState.PLAYING, 0); 
            }
        }
    }
}
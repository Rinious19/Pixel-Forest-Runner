package entities;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;

import animation.Animation;
import animation.AnimationManager;
import utils.AssetLoader; // üí° ‡πÉ‡∏ä‡πâ Package ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
import core.GamePanel;      // üí° ‡πÉ‡∏ä‡πâ Package ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
import entities.CharacterInfo; 

//? Player Class ‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏°‡∏≤‡∏à‡∏≤‡∏Å GameObject
public class Player extends GameObject {
    //@ Attributes
    private GamePanel gamePanel; 
    private int hp = 100; 
    //* Physics 
    private double verticalSpeed = 0; 
    private double gravity = 0.5;
    private double jumpStrength = -12; 
    private int groundLevel = 480; 
    private boolean isAlive = true; 
    //* Player State Machine
    private enum PlayerState {
        RUNNING, JUMPING;
    }
    private PlayerState currentState;
    //* Animation 
    private AnimationManager animationManager;
    private Animation animRun, animJump;
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    private CharacterInfo selectedInfo; 

    //@ Constructor
    public Player(int x, int y, int width, int height, GamePanel gamePanel) {
        super(x, y, width, height);
        this.gamePanel = gamePanel; 
        this.currentState = PlayerState.RUNNING;
        // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Hitbox Initialization ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        // üí° OffsetX: ‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ (35)
        int hitboxOffsetX = 44; 
        // üí° HitboxWidth: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Hitbox (40)
        int hitboxWidth = 40; 
        // üí° OffsetY: ‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏°‡∏≤ (20)
        int hitboxOffsetY = 15; 
        // üí° HitboxHeight: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á Hitbox (80)
        int hitboxHeight = 105; 
        this.hitbox = new Rectangle(x + hitboxOffsetX, y + hitboxOffsetY, hitboxWidth, hitboxHeight);
        // ‚ö†Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadAnimations ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        this.selectedInfo = loadAnimations(gamePanel.getSelectedCharacterId()); 
        
        this.animationManager = new AnimationManager(animRun);
    }

    //@ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    private CharacterInfo loadAnimations(int characterId) { // ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ return CharacterInfo
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        CharacterInfo info = null;
        for (CharacterInfo c : CharacterInfo.loadAllCharacters()) {
            if (c.getId() == characterId) {
                info = c;
                break;
            }
        }
        if (info == null) { 
            info = CharacterInfo.loadAllCharacters()[0]; 
        }
        
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Sprite Sheet
    final int FRAME_WIDTH = 128;
    final int FRAME_HEIGHT = 128;
    final int FRAME_COUNT = 10;
    // ‡πÇ‡∏´‡∏•‡∏î Sprite Sheet
    BufferedImage runSheet = AssetLoader.loadSprite(info.getRunAsset());
    BufferedImage jumpSheet = AssetLoader.loadSprite(info.getJumpAsset());
    // ‚úÖ ‡∏ï‡∏±‡∏î‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏ô‡∏•‡∏π‡∏õ
    BufferedImage[] runFrames = new BufferedImage[FRAME_COUNT];
    for (int i = 0; i < FRAME_COUNT; i++) {
        runFrames[i] = AssetLoader.getSubImage(runSheet, i, 0, FRAME_WIDTH, FRAME_HEIGHT);
    }
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î (‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ü‡∏£‡∏°)
    BufferedImage[] jumpFrames = new BufferedImage[FRAME_COUNT];
    for (int i = 0; i < FRAME_COUNT; i++) {
        jumpFrames[i] = AssetLoader.getSubImage(jumpSheet, i, 0, FRAME_WIDTH, FRAME_HEIGHT);
    }
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
    this.animRun = new Animation(runFrames, 80); // 80ms ‡∏ï‡πà‡∏≠‡πÄ‡∏ü‡∏£‡∏°
    this.animJump = new Animation(jumpFrames, 100);
        return info; // ‚ö†Ô∏è ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ info ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    }

    @Override
    public void update() {
        if (y < groundLevel || verticalSpeed < 0) {
            verticalSpeed += gravity;
            y += verticalSpeed; 
            setState(PlayerState.JUMPING); 
        }
        if (y >= groundLevel && verticalSpeed > 0) {
            y = groundLevel;
            verticalSpeed = 0;
            setState(PlayerState.RUNNING); 
        }
        
        // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Hitbox Update 
        // -------------------------------------------------------------------
        // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Offset ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î Hitbox ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô Constructor
        int hitboxOffsetX = 34;
        int hitboxWidth = 45;
        int hitboxOffsetY = 45;
        int hitboxHeight = 85;
        
        updateHitbox(this.x + hitboxOffsetX, this.y + hitboxOffsetY, hitboxWidth, hitboxHeight);
        // -------------------------------------------------------------------
    }

    private void setState(PlayerState newState) {
        if (currentState == newState) return; 
        currentState = newState;
        switch (newState) {
            case RUNNING:
                animationManager.setAnimation(animRun);
                break;
            case JUMPING:
                animationManager.setAnimation(animJump);
                break;
        }
    }

    @Override
    public void draw(Graphics g) {
        BufferedImage frame = animationManager.getFrameToDraw();
        if (frame != null) {
            g.drawImage(frame, x, y, width, height, null);
        } else {
            // Fallback ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
            g.setColor(Color.MAGENTA); 
            g.fillRect(x, y, width, height);
        }
        // ‡∏ß‡∏≤‡∏î Hitbox
        drawHitbox(g);
    }
    
    public void handleKeyPress(int keyCode) {
        if (keyCode == KeyEvent.VK_SPACE) {
            jump();
        }
    }

    public void handleKeyRelease(int keyCode) {
        // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    }

    public int getHp() { return hp; }
    public boolean isAlive() { return isAlive; }
    public AnimationManager getAnimationManager() { return animationManager; }
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: Getter Methods ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å selectedInfo)
    public String getName() {
        return selectedInfo != null ? selectedInfo.getName() : "Unknown";
    }

    public int getId() {
        return selectedInfo != null ? selectedInfo.getId() : -1;
    }
    
    public void takeDamage(int damage) {
        if (!isAlive) return; 
        this.hp -= damage;
        if (this.hp <= 0) {
            this.hp = 0;
            die();
        }
    }
    public void die() {
        this.isAlive = false;
    }

    private void jump() {
        if (currentState != PlayerState.JUMPING) {
            verticalSpeed = jumpStrength;
            setState(PlayerState.JUMPING); 
        }
    }
}